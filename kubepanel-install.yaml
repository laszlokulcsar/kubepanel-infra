apiVersion: v1
kind: Namespace
metadata:
  name: kubepanel
---
apiVersion: piraeus.io/v1
kind: LinstorCluster
metadata:
  name: linstorcluster
spec: {}
---
apiVersion: piraeus.io/v1
kind: LinstorCluster
metadata:
  name: linstorcluster
spec:
  patches:
    - target:
        name: linstor-csi-node
        kind: DaemonSet
      patch: |
        apiVersion: apps/v1
        kind: DaemonSet
        metadata:
          name: linstor-csi-node
        spec:
          template:
            spec:
              containers:
              - name: linstor-csi
                volumeMounts:
                - mountPath: /var/lib/kubelet
                  name: publish-dir
                  $patch: delete
                - mountPath: /var/snap/microk8s/common/var/lib/kubelet
                  name: publish-dir
                  mountPropagation: Bidirectional
---
apiVersion: piraeus.io/v1
kind: LinstorSatelliteConfiguration
metadata:
  name: storage-pool
spec:
  storagePools:
    - name: pool1
      lvmThinPool:
        thinPool: linstorlv
        volumeGroup: linstorvg
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: linstor-sc
provisioner: linstor.csi.linbit.com
allowVolumeExpansion: true
volumeBindingMode: WaitForFirstConsumer
parameters:
  linstor.csi.linbit.com/storagePool: pool1
  csi.storage.k8s.io/fstype: xfs
  linstor.csi.linbit.com/placementCount: "2"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: kubepanel
  namespace: kubepanel
spec:
  accessModes: [ReadWriteMany]
  storageClassName: linstor-sc  # This must match the PV's storageClassName
  resources: { requests: { storage: 1Gi } }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubepanel
  namespace: kubepanel
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kubepanel
  template:
    metadata:
      labels:
        app: kubepanel
    spec:
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app: opendkim
            topologyKey: "kubernetes.io/hostname"
      #automountServiceAccountToken: false
      volumes:
      - name: kubepanel
        persistentVolumeClaim:
          claimName: kubepanel
      - persistentVolumeClaim:
          claimName: dkim-privkeys-pvc
        name: dkim-privkeys
      initContainers:
      - name: wait-for-mariadb
        image: busybox:1.36
        command:
          - sh
          - -c
          - |
            echo "Waiting for MariaDB to be ready...";
            until nc -z mariadb.kubepanel.svc.cluster.local 3306; do
              echo "MariaDB not ready, sleeping...";
              sleep 2;
            done
            echo "MariaDB is up!"
      - name: init
        image: docker.io/laszlokulcsar/init:v0.1
        env:
        - name: DJANGO_SUPERUSER_EMAIL
          value: "<DJANGO_SUPERUSER_EMAIL>"
        - name: DJANGO_SUPERUSER_USERNAME
          value: "<DJANGO_SUPERUSER_USERNAME>"
        - name: DJANGO_SUPERUSER_PASSWORD
          value: "<DJANGO_SUPERUSER_PASSWORD>"
        - name: KUBEPANEL_DOMAIN
          value: "<KUBEPANEL_DOMAIN>"
        - name: DBNAME
          value: "kubepanel"
        - name: MARIADB_ROOT_PASSWORD
          value: "<MARIADB_ROOT_PASSWORD>"
        - name: DBNAME_RC
          value: "roundcube"
        - name: MARIADB_ROOT_PASSWORD_RC
          value: "<MARIADB_ROOT_PASSWORD_RC>"
        imagePullPolicy: Always
        volumeMounts:
        - name: kubepanel
          mountPath: /kubepanel
        - name: dkim-privkeys
          mountPath: /dkim-privkeys
      containers:
      - name: dashboard
        image: docker.io/laszlokulcsar/dashboard:v0.1
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
        volumeMounts:
        - name: kubepanel
          mountPath: /kubepanel
        - name: dkim-privkeys
          mountPath: /dkim-privkeys
      - name: watchdog
        image: docker.io/laszlokulcsar/watchdog:v0.1
        imagePullPolicy: Always
        volumeMounts:
        - name: kubepanel
          mountPath: /kubepanel
---
apiVersion: v1
kind: Service
metadata:
  name: kubepanel
  namespace: kubepanel
spec:
  type: ClusterIP
  selector:
    app: kubepanel
  ports:
  - name: django
    port: 8000
    targetPort: 8000
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress
  namespace: kubepanel
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  ingressClassName: public
  tls:
  - hosts:
    - <KUBEPANEL_DOMAIN>
    secretName: kubepanel-cert
  rules:
  - host: "<KUBEPANEL_DOMAIN>"
    http:
      paths:
      - pathType: Prefix
        path: "/"
        backend:
          service:
            name: kubepanel
            port:
              number: 8000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: opendkim
  namespace: kubepanel
spec:
  replicas: 1
  selector:
    matchLabels:
      app: opendkim
  template:
    metadata:
      labels:
        app: opendkim
    spec:
     initContainers:
     - name: chmod-keys
       image: ubuntu:latest
       command: ["sh","-c","chown -R 100:101 /etc/opendkim/ && chmod -R 700 /etc/opendkim/"]
       volumeMounts:
       - name: dkim-privkeys
         mountPath: "/etc/opendkim/keys/"
     containers:
      - name: opendkim
        image: docker.io/laszlokulcsar/opendkim:v0.1
        imagePullPolicy: Always
        volumeMounts:
        - name: dkim-keytable
          mountPath: "/etc/opendkim/KeyTable"
          subPath: "KeyTable"
        - name: dkim-signingtable
          mountPath: "/etc/opendkim/SigningTable"
          subPath: "SigningTable"
        - name: dkim-privkeys
          mountPath: "/etc/opendkim/keys/"
          readOnly: true
        imagePullPolicy: Always
        ports:
        - containerPort: 8891
     volumes:
     - configMap:
         name: dkim-keytable
       name: dkim-keytable
     - configMap:
         name: dkim-signingtable
       name: dkim-signingtable
     - persistentVolumeClaim:
         claimName: dkim-privkeys-pvc
       name: dkim-privkeys
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: dkim-privkeys-pvc
  namespace: kubepanel
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: linstor-sc  # This must match the PV's storageClassName
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: opendkim
  namespace: kubepanel
spec:
  internalTrafficPolicy: Cluster
  ipFamilies:
  - IPv4
  ipFamilyPolicy: SingleStack
  ports:
  - name: opendkim
    port: 8891
    protocol: TCP
    targetPort: 8891
  selector:
    app: opendkim
  sessionAffinity: None
  type: ClusterIP
status:
  loadBalancer: {}
---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    # You must replace this email address with your own.
    # Let's Encrypt will use this to contact you about expiring
    # certificates, and issues related to your account.
    email: <DJANGO_SUPERUSER_EMAIL>
    server: https://acme-v02.api.letsencrypt.org/directory
    privateKeySecretRef:
      # Secret resource that will be used to store the account's private key.
      name: letsencrypt-account-key
    # Add a single challenge solver, HTTP01 using nginx
    solvers:
    - http01:
        ingress:
          ingressClassName: public
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: smtp
  namespace: kubepanel
spec:
  replicas: 1
  selector:
    matchLabels:
      app: smtp
  template:
    metadata:
      labels:
        app: smtp
    spec:
     containers:
      - name: smtp
        image: docker.io/laszlokulcsar/smtp:v0.1
        imagePullPolicy: Always
        ports:
        - containerPort: 25
        env:
        - name: MARIADB_ROOT_PASSWORD
          value: "<MARIADB_ROOT_PASSWORD>"
        volumeMounts:
        - name: mail-tls
          mountPath: /etc/ssl/kubepanel
          readOnly: true
        - mountPath: /var/spool/postfix
          name: postfix-queue
        - mountPath: /var/mail/vmail
          name: smtp-data
        - name: smtp-conf
          mountPath: /etc/postfix/main.cf
          subPath: main.cf
        - name: smtp-conf
          mountPath: /etc/postfix/mysql-virtual-alias-maps.cf
          subPath: mysql-virtual-alias-maps.cf
        - name: smtp-conf
          mountPath: /etc/postfix/mysql-virtual-mailbox-domains.cf
          subPath: mysql-virtual-mailbox-domains.cf
        - name: smtp-conf
          mountPath: /etc/postfix/mysql-virtual-mailbox-maps.cf
          subPath: mysql-virtual-mailbox-maps.cf
        - name: smtp-conf
          mountPath: /etc/dovecot/dovecot-sql.conf.ext
          subPath: dovecot-sql.conf.ext
        - name: smtp-conf
          mountPath: /etc/dovecot/conf.d/10-mail.conf
          subPath: 10-mail.conf
     volumes:
     - name: smtp-data
       persistentVolumeClaim:
         claimName: smtp-pvc
     - name: postfix-queue
       persistentVolumeClaim:
         claimName: postfix-queue-pvc
     - configMap:
         name: smtp-conf
       name: smtp-conf
     - name: mail-tls
       secret:
         secretName: kubepanel-cert
---
apiVersion: v1
kind: Service
metadata:
  name: smtp
  namespace: kubepanel
spec:
  externalTrafficPolicy: Local
  internalTrafficPolicy: Cluster
  ipFamilies:
  - IPv4
  ipFamilyPolicy: SingleStack
  ports:
  - name: smtp
    port: 25
    protocol: TCP
    targetPort: 25
  - name: imap
    port: 993
    protocol: TCP
    targetPort: 993
  - name: submission
    port: 587
    protocol: TCP
    targetPort: 587

  selector:
    app: smtp
  sessionAffinity: None
  type: ClusterIP
  externalIPs:
  - <NODE_1_IP>
  - <NODE_2_IP>
  - <NODE_3_IP>
status:
  loadBalancer: {}
---
apiVersion: v1
kind: Service
metadata:
  name: imap-ingress
  namespace: ingress
  labels:
    name: nginx-ingress-microk8s
spec:
  type: ClusterIP
  ports:
    - name: proxied-tcp-993
      port: 993
      targetPort: 993
      protocol: TCP
    - name: proxied-tcp-587
      port: 587
      targetPort: 587
      protocol: TCP
  selector:
    name: nginx-ingress-microk8s
  externalIPs:
  - <NODE_1_IP>
  - <NODE_2_IP>
  - <NODE_3_IP>
---
apiVersion: v1
data:
  "587": kubepanel/smtp:587
  "993": kubepanel/smtp:993
kind: ConfigMap
metadata:
  name: nginx-ingress-tcp-microk8s-conf
  namespace: ingress
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mariadb
  namespace: kubepanel
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mariadb
  template:
    metadata:
      labels:
        app: mariadb
    spec:
      volumes:
      - name: mariadb-data
        persistentVolumeClaim:
          claimName: mariadb-pvc
      containers:
      - name: mariadb
        image: mariadb
        volumeMounts:
        - mountPath: /var/lib/mysql
          name: mariadb-data
        ports:
        - containerPort: 3306
        env:
        - name: MARIADB_ROOT_PASSWORD
          value: "<MARIADB_ROOT_PASSWORD>"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mariadb-pvc
  namespace: kubepanel
spec:
  accessModes: [ReadWriteOnce]
  storageClassName: linstor-sc
  resources: { requests: { storage: 5Gi } }
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: smtp-pvc
  namespace: kubepanel
spec:
  accessModes: [ReadWriteOnce]
  storageClassName: linstor-sc
  resources: { requests: { storage: 5Gi } }
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postfix-queue-pvc
  namespace: kubepanel
spec:
  accessModes: [ReadWriteOnce]
  storageClassName: linstor-sc
  resources: { requests: { storage: 1Gi } }
---
apiVersion: v1
kind: Service
metadata:
  name: mariadb
  namespace: kubepanel
spec:
  selector:
    app: mariadb
  ports:
  - port: 3306
    protocol: TCP
    targetPort: 3306
    name: mariadb
---
apiVersion: v1
kind: Secret
metadata:
  name: mariadb-auth
  namespace: kubepanel
type: kubernetes.io/basic-auth
stringData:
  username: root 
  password: <MARIADB_ROOT_PASSWORD>
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: smtp-conf
  namespace: kubepanel
data:
  main.cf: |-
    smtpd_banner = $myhostname ESMTP $mail_name (Ubuntu)
    biff = no
    append_dot_mydomain = no
    readme_directory = no
    compatibility_level = 3.6
    smtpd_tls_cert_file=/etc/ssl/kubepanel/tls.crt
    smtpd_tls_key_file=/etc/ssl/kubepanel/tls.key
    smtpd_tls_security_level=may
    smtpd_tls_auth_only = yes
    smtp_tls_CApath=/etc/ssl/certs
    smtp_tls_security_level=may
    smtp_tls_session_cache_database = btree:${data_directory}/smtp_scache
    smtpd_relay_restrictions = permit_mynetworks permit_sasl_authenticated defer_unauth_destination
    myhostname = <KUBEPANEL_DOMAIN>
    mydomain = <KUBEPANEL_DOMAIN>
    myorigin = $mydomain
    alias_maps = hash:/etc/aliases
    alias_database = hash:/etc/aliases
    mydestination = $myhostname, localhost, localhost.localdomain, , localhost
    relayhost =
    mynetworks = 10.0.0.0/8 127.0.0.0/8 [::ffff:127.0.0.0]/104 [::1]/128
    mailbox_size_limit = 0
    recipient_delimiter = +
    inet_interfaces = all
    inet_protocols = all
    smtpd_milters = inet:opendkim.kubepanel.svc.cluster.local:8891
    non_smtpd_milters       = $smtpd_milters
    milter_default_action   = accept
    maillog_file = /var/log/postfix.log
    virtual_mailbox_domains = mysql:/etc/postfix/mysql-virtual-mailbox-domains.cf
    virtual_mailbox_maps = mysql:/etc/postfix/mysql-virtual-mailbox-maps.cf
    virtual_alias_maps = mysql:/etc/postfix/mysql-virtual-alias-maps.cf
    virtual_transport = lmtp:unix:private/dovecot-lmtp
    smtpd_sasl_type = dovecot
    smtpd_sasl_path = private/auth
    smtpd_sasl_auth_enable = yes
    smtpd_sasl_security_options = noanonymous
    smtpd_sasl_local_domain = $myhostname
  mysql-virtual-mailbox-maps.cf: |-
    user = kubepanel
    password = <MARIADB_ROOT_PASSWORD>
    hosts = mariadb.kubepanel.svc.cluster.local
    dbname = kubepanel
    query = SELECT CONCAT(dashboard_domain.domain_name, '/', dashboard_mailuser.local_part, '/') AS maildir
            FROM dashboard_mailuser
            JOIN dashboard_domain
              ON dashboard_mailuser.domain_id = dashboard_domain.id
            WHERE dashboard_mailuser.active = 1
              AND CONCAT(dashboard_mailuser.local_part, '@', dashboard_domain.domain_name) = '%s'
  mysql-virtual-alias-maps.cf: |-
    user = kubepanel
    password = <MARIADB_ROOT_PASSWORD>
    hosts = mariadb.kubepanel.svc.cluster.local
    dbname = kubepanel
    query = SELECT dashboard_mailalias.destination
            FROM dashboard_mailalias
            WHERE dashboard_mailalias.active = 1
              AND dashboard_mailalias.source = '%s'
  mysql-virtual-mailbox-domains.cf: |-
    user = kubepanel
    password = <MARIADB_ROOT_PASSWORD>
    hosts = mariadb.kubepanel.svc.cluster.local
    dbname = kubepanel
    query = SELECT dashboard_domain.domain_name
            FROM dashboard_domain
            WHERE dashboard_domain.domain_name='%s'
  dovecot-sql.conf.ext: |-
    driver = mysql
    connect = host=mariadb.kubepanel.svc.cluster.local dbname=kubepanel user=kubepanel password=<MARIADB_ROOT_PASSWORD>
    default_pass_scheme = SHA512-CRYPT
    password_query = SELECT \
        CONCAT(dashboard_mailuser.local_part, '@', dashboard_domain.domain_name) AS user, \
        dashboard_mailuser.password AS password, \
        '/var/mail/vmail/' AS userdb_home, \
        'vmail' AS userdb_uid, \
        'vmail' AS userdb_gid, \
        CONCAT('maildir:/var/mail/vmail/', dashboard_domain.domain_name, '/', dashboard_mailuser.local_part, '/') AS userdb_mail \
    FROM dashboard_mailuser \
    JOIN dashboard_domain ON dashboard_mailuser.domain_id = dashboard_domain.id \
    WHERE dashboard_mailuser.active = 1 \
      AND CONCAT(dashboard_mailuser.local_part, '@', dashboard_domain.domain_name) = '%u'
  10-mail.conf: |-
    mail_location = maildir:/var/mail/vmail/%d/%n
    passdb {
      driver = sql
      args = /etc/dovecot/dovecot-sql.conf.ext
    }
    userdb {
      driver = static
      args = uid=vmail gid=vmail home=/var/mail/vmail/%d/%n
    }
    namespace inbox {
      inbox = yes
    }
    mail_privileged_group = mail
    protocol !indexer-worker {
    }
---
apiVersion: v1
data:
  hsts: "false"
  proxy-body-size: 100M
  ssl-redirect: "false"
  enable-modsecurity: "true"
  enable-owasp-modsecurity-crs: "false"
  log-format-upstream: '{"time": "$time_iso8601", "remote_addr": "$proxy_protocol_addr",
    "x_forwarded_for": "$proxy_add_x_forwarded_for", "request_id": "$req_id", "remote_user":
    "$remote_user", "bytes_sent": $bytes_sent, "request_time": $request_time, "status":
    $status, "vhost": "$host", "request_proto": "$server_protocol", "path": "$uri",
    "request_query": "$args", "request_length": $request_length, "duration": $request_time,"method":
    "$request_method", "http_referrer": "$http_referer", "http_user_agent": "$http_user_agent",
    "request_body": "$request_body" }'
kind: ConfigMap
metadata:
  name: nginx-load-balancer-microk8s-conf
  namespace: ingress
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: node-public-ips
  namespace: kubepanel
data: {}
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: node-ip-updater
  namespace: kubepanel
spec:
  selector:
    matchLabels:
      app: node-ip-updater
  template:
    metadata:
      labels:
        app: node-ip-updater
    spec:
      hostNetwork: true
      tolerations:
      - operator: Exists
      containers:
      - name: updater
        image: docker.io/laszlokulcsar/watchdog:v0.1
        command: ["/bin/sh","-c"]
        args:
        - |
          # Fetch the public IP
          IP=$(curl -s ifconfig.me)
          NODE=$(hostname)
          echo "Patching ConfigMap: $NODE → $IP"
          kubectl patch configmap node-public-ips \
            --namespace=kubepanel \
            --type=merge \
            --patch "{\"data\": {\"${NODE}\": \"${IP}\"}}"
          sleep 86400
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: roundcube-pvc
  namespace: kubepanel
spec:
  accessModes: [ReadWriteOnce]
  storageClassName: linstor-sc
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: roundcube
  namespace: kubepanel
spec:
  replicas: 1
  selector:
    matchLabels:
      app: roundcube
  template:
    metadata:
      labels:
        app: roundcube
    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: roundcube-pvc
      containers:
        - name: roundcube
          image: roundcube/roundcubemail:1.6.6-apache        # upstream image
          imagePullPolicy: IfNotPresent
          env:
            - name: ROUNDCUBEMAIL_DEFAULT_HOST      # IMAP host = dovecot lmtp sibling
              value: "ssl://<KUBEPANEL_DOMAIN>"    # IMAPS = 993
            - name: ROUNDCUBEMAIL_SMTP_SERVER       # SMTP submission port 587
              value: "tls://<KUBEPANEL_DOMAIN>"
            - name: ROUNDCUBEMAIL_DEFAULT_PORT
              value: "993"
            - name: ROUNDCUBE_DB_TYPE
              value: "mysql"
            - name: ROUNDCUBE_DB_HOST
              valueFrom: { secretKeyRef: { name: roundcube-db-secret, key: DB_HOST } }
            - name: ROUNDCUBE_DB_PORT
              valueFrom: { secretKeyRef: { name: roundcube-db-secret, key: DB_PORT } }
            - name: ROUNDCUBE_DB_USER
              valueFrom: { secretKeyRef: { name: roundcube-db-secret, key: DB_USER } }
            - name: ROUNDCUBE_DB_PASSWORD
              valueFrom: { secretKeyRef: { name: roundcube-db-secret, key: DB_PASSWORD } }
            - name: ROUNDCUBE_DB_NAME
              valueFrom: { secretKeyRef: { name: roundcube-db-secret, key: DB_NAME } }
          ports:
            - containerPort: 80        # PHP-FPM
          volumeMounts:
            - name: data
              mountPath: /var/roundcube          # temp, logs, plugins, etc.
---
apiVersion: v1
kind: Service
metadata:
  name: roundcube
  namespace: kubepanel
spec:
  type: ClusterIP
  selector:
    app: roundcube
  ports:
    - name: http
      port: 80
      targetPort: 80
---
apiVersion: v1
kind: Secret
metadata:
  name: roundcube-db-secret
  namespace: kubepanel
type: Opaque
stringData:
  DB_USER:     roundcube                      # create this user in MariaDB
  DB_PASSWORD: <MARIADB_ROOT_PASSWORD_RC>
  DB_NAME:     roundcube                      # create this DB in MariaDB
  DB_HOST:     mariadb.kubepanel.svc.cluster.local
  DB_PORT:     "3306"
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: roundcube
  namespace: kubepanel
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  ingressClassName: public
  tls:
    - hosts: [ "webmail.<KUBEPANEL_DOMAIN>" ]
      secretName: roundcube-cert
  rules:
    - host: "webmail.<KUBEPANEL_DOMAIN>"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: roundcube
                port:
                  number: 80
---
apiVersion: snapshot.storage.k8s.io/v1
kind: VolumeSnapshotClass
metadata:
  name: piraeus-snapshots
driver: linstor.csi.linbit.com
deletionPolicy: Delete

